using Microsoft.Win32;
using System;
using System.Collections;
using System.Diagnostics;

using System.DirectoryServices.ActiveDirectory;
using System.IO;
using System.IO.Pipes;

namespace noquestcsharp
{
    public partial class advanced : Form
    {
        private static string cmdpath = @"C:\Program Files\Oculus\Support\oculus-diagnostics\CommandsforCLI.txt";
        public string savefilefolder = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\OTS\";
        public string savefile = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\OTS\config.cfg";
        private string ocpath = Environment.GetEnvironmentVariable("OculusBase");
        private bool aswdone = false;
        private bool controldone = false;
        public advanced()
        {
            InitializeComponent();

            // Check to make sure Commands.txt exist
            if (File.Exists(cmdpath) == true)
            {
                // Check to make sure config.cfg exist (this is currently unused but will be used in a future update)
                if (File.Exists(savefile) == true)
                {

                }
                else
                {
                    Directory.CreateDirectory(savefilefolder);
                    File.Create(savefile).Dispose();
                    using (StreamWriter sw = File.CreateText(savefile))
                    {
                        sw.WriteLine("~This is the config file for Oculus Troubleshooter");
                        sw.WriteLine("~WARNING: do not edit this file or the program may not detect the file\r\n");
                        sw.WriteLine("start.auto=0");
                    }

                }
            }
            else
            {
                Process process = new Process();
                ProcessStartInfo startInfo = new ProcessStartInfo();
                startInfo.FileName = "cmd.exe";
                startInfo.Arguments = @"/C takeown C:\Program Files\Oculus\ /R";
                process.StartInfo = startInfo;
                process.Start();
                File.Create(cmdpath).Dispose();

            }


        }

        private void radioButton1_CheckedChanged(object sender, EventArgs e)
        {
            using (StreamWriter sw = File.CreateText(cmdpath))
            {
                aswdone = false;
                // ASW OFF
                sw.Flush();
                sw.WriteLine("server:asw.Off");

                aswdone = true;
            }
        }
        private void radioButton2_CheckedChanged(object sender, EventArgs e)
        {
            using (StreamWriter sw = File.CreateText(cmdpath))
            {
                aswdone = false;
                // ASW 45
                sw.Flush();
                sw.WriteLine("server:asw.Clock45");
                aswdone = true;
            }
        }
        private void radioButton3_CheckedChanged(object sender, EventArgs e)
        {
            // ASW 30
            using (StreamWriter sw = File.CreateText(cmdpath))
            {
                aswdone = false;
                sw.Flush();
                sw.WriteLine("server:asw.Clock30");
                aswdone = true;
            }
        }
        private void radioButton4_CheckedChanged(object sender, EventArgs e)
        {
            // ASW 18
            using (StreamWriter sw = File.CreateText(cmdpath))
            {
                aswdone = false;
                sw.Flush();
                sw.WriteLine("server:asw.Clock18");
                aswdone = true;
            }
        }

        private void radioButton5_CheckedChanged(object sender, EventArgs e)
        {
            // FORCE 45
            using (StreamWriter sw = File.CreateText(cmdpath))
            {
                aswdone = false;
                sw.Flush();
                sw.WriteLine("server:asw.Phase45");
                aswdone = true;
            }
        }

        private void radioButton6_CheckedChanged(object sender, EventArgs e)
        {
            // ASW AUTO
            using (StreamWriter sw = File.CreateText(cmdpath))
            {
                aswdone = false;
                sw.Flush();
                sw.WriteLine("server:asw.auto");
                aswdone = true;
            }
        }
        private void checkBox2_CheckedChanged(object sender, EventArgs e)
        {
            if (!checkBox1.ThreeState)
            {
                // Turn off USB Sleep
                Process process = new Process();
                ProcessStartInfo startInfo = new ProcessStartInfo();
                startInfo.FileName = "cmd.exe";
                startInfo.Arguments = @"/C start powercfg /SETACVALUEINDEX SCHEME_CURRENT 2a737441-1930-4402-8d77-b2bebba308a3 48e6b7a6-50f5-4782-a5d4-53bb8f07e226 0";
                process.StartInfo = startInfo;
                process.Start();
            }
            else
            {
                Process process = new Process();
                ProcessStartInfo startInfo = new ProcessStartInfo();
                startInfo.FileName = "cmd.exe";
                startInfo.Arguments = @"/C powercfg /SETACVALUEINDEX SCHEME_CURRENT 2a737441-1930-4402-8d77-b2bebba308a3 48e6b7a6-50f5-4782-a5d4-53bb8f07e226 1";
                process.StartInfo = startInfo;
                process.Start();
            }
        }
        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            // Controller Sleep
            if (aswdone && checkBox1.ThreeState)
            {

                using (StreamWriter sw = File.AppendText(cmdpath))
                {
                    controldone = false;
                    sw.WriteLine("server:Touch.DisableSleep true");
                    controldone = true;
                }
            }
            if (aswdone && !checkBox1.ThreeState)
            {
                using (StreamWriter sw = File.AppendText(cmdpath))
                {
                    controldone = false;
                    sw.WriteLine("server:Touch.DisableSleep false");
                    controldone = true;
                }
            }


        }

        private void button2_Click(object sender, EventArgs e)
        {
            // Reinstall Dialog
            ReinstallDialog reinstallDialog = new ReinstallDialog();
            reinstallDialog.ShowDialog();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            using (StreamWriter sw = File.AppendText(cmdpath))
            {
                sw.WriteLine("exit");
            }

            // Apply changes
            Process process = new Process();
            ProcessStartInfo startInfo = new ProcessStartInfo();
            startInfo.FileName = "cmd.exe";
            startInfo.Arguments = "/C start /d \"" + ocpath + "Support\\oculus-diagnostics\\\" OculusDebugToolCLI.exe -f CommandsforCLI.txt";
            process.StartInfo = startInfo;
            process.Start();
            process.WaitForExit();

            // Check "start with" combobox
            string i = comboBox1.GetItemText(comboBox1.SelectedItem);
            if (i != null)
            {
                if (i == "Nothing")
                {
                    // Do nothing
                }
                if (i == "Windows")
                {
                    RegistryKey rk = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Run", true);
                    rk.SetValue("OculusTroubleshooter", Application.ExecutablePath);
                    rk.Dispose();

                }
                else
                {
                    RegistryKey rk = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Run", true);
                    rk.DeleteValue("OculusTroubleshooter", false);
                    rk.Dispose();
                }
                if (i == "Oculus")
                {
                    // Currently this does not work
                }
            }
        }
    }
}
